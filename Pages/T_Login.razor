@layout CenteredCardLayout
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using TSJ_CRI.Authentication
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations
@inject UserAuthAd userAuthAd
@inject UserAccountService userAccountService
@page "/"

<br />
<div>
    <br />
    <RadzenCard Style="width: 100%;">
        <h2 class="mb-4">Claim Report Integration</h2>
        <RadzenTemplateForm Data=@("Localization")>
            <RadzenLogin AllowRegister="false" AllowResetPassword="false"
                         LoginText="Login" UserText="Username TSJ" PasswordText="Password PC"
                         UserRequired="Mohon diisi"
                         PasswordRequired="Mohon Diisi"
                         Login=@(args => OnLogin(args, "Simple login")) />
        </RadzenTemplateForm>
    </RadzenCard>
</div>



@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task DisplayAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";
        //await js.invokevoidasync("alert", message);
    }

    [Inject] protected IHxMessengerService Messenger { get; set; }

    private async void ErrorMessenger(string _message)
    {
        Messenger.Clear();
        Messenger.AddError(title: "Error", message: _message);
        await Task.Delay(5000);
        Messenger.Clear();
    }

    private async Task OnLogin(LoginArgs args, string name)
    {

        var userAccount = await userAuthAd.IsAuthenticated("inf-addc-01.enseval.com", args.Username, args.Password);

        if (userAccount == null)
        {
            string message = "mohon di cek kembali koneksi dan akun anda";
            ErrorMessenger(message);
            return;
        }


        var customAuthStateProvider = (CustomAuth)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.First().UserName,
            Role = userAccount.First().Role,
            Cabang = userAccount.First().Cabang
        });

        navManager.NavigateTo("/counter", true);

    }

}
