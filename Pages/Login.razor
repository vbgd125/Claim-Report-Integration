@page "/login"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using TSJ_CRI.Authentication
@using TSJ_CRI.Helpers
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]

<style>
    body {
        /*background: #007bff;
        background: linear-gradient(to right, #0062E6, #33AEFF);*/
        zoom: 112%;
    }
</style>

<section class="h-100 gradient-form" style="background-color: #e6e7e8;">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-xl-10">
                <div class="card rounded-3 text-black">
                    <div class="row g-0">
                        <div class="col-lg-6">
                            <div class="card-body md-5">
                                <div class="text-center">
                                    <img src="custom_assets/img/tsj.png"
                                         style="width: 185px;" alt="logo">
                                    <h4 class="mt-1 mb-5 pb-1">Claim Report Integration</h4>
                                </div>

                                <form>
                                    <p>Mohon login menggunakan user windows</p>
                                    <EditForm Model="@model">
                                        <DataAnnotationsValidator />
                                        <div class="form-outline">
                                            <HxInputText Label="User login windows" CssClass="mb-3" @bind-Value="@model.User" InputGroupEndText="@domain_tsj" Placeholder="namadepan.namabelakang" />
                                        </div>

                                        <div class="form-outline">
                                            <HxInputText Label="Password login windows" Type="InputType.Password" CssClass="mb-3" @bind-Value="@model.Pass" Placeholder="Password" />
                                        </div>

                                        <div class="text-center pt-1 pb-1">
                                            <HxSubmit Color="ThemeColor.Primary" OnValidClick="@(async () => await Auth(model))"><i class="bi bi-box-arrow-in-right"></i> Login</HxSubmit>
                                            Belum daftar ?<a class="small" href="http://helpdeskepm.enseval.com/"> AJUKAN DISINI</a>
                                        </div>

                                    </EditForm>
                                </form>
                            </div>
                        </div>
                        <div class="col-lg-6 d-flex align-items-center gradient-custom-2">
                            <div class="text-white px-3 py-4 p-md-5">
                                <h4 class="mb-4">Claim Report Integration</h4>
                                <p class="medium mb-0">
                                    Merupakan sistem integrasi yang berguna untuk memudahkan claim apabila ada ketidaksesuaian serta meminimalisir terjadinya kesalahan,
                                    miskomunikasi internal maupun eksternal, mengurangi resiko ditolak klaim oleh ekspedisi,
                                    memudahkan menelusuri barang kurang-lebih, hilang atau rusak, dan membantu evaluasi kinerja ekspedisi
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</section>

@code {
    private string domain_tsj = "@tsj.co.id";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            var returnUrl = navManager.QueryString("returnUrl") ?? "";
            navManager.NavigateTo(returnUrl, forceLoad:true);
        }
    }

    protected UserLogin model = new UserLogin();
    public class UserLogin
    {
        [Required(ErrorMessage = "Username tidak boleh kosong")]
        [MaxLength(50, ErrorMessage = "Panjang maksimal username 50 karakter.")]
        public string User { get; set; }
        [Required(ErrorMessage = "Password tidak boleh kosong")]
        [MaxLength(100, ErrorMessage = "Panjang maksimal password 100 karakter.")]
        public string Pass { get; set; }
    }

    [Inject] protected IHxMessengerService Messenger { get; set; }
    private async void ErrorMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddError(title: _title, message: _message);
        await Task.Delay(1000);
    }

    private async void WarningMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddWarning(title: _title, message: _message);
        await Task.Delay(1000);
    }

    private async Task Auth(UserLogin _user)
    {
        await Task.Delay(1);
        var activeDirectory = userAccountService.WindowsAuth(_user.User, _user.Pass);
        if (activeDirectory != null)
        {
            ErrorMessenger("Login windows gagal 😖", activeDirectory);
            return;
        }

        var userDb = await userAccountService.GetUser(_user.User);
        if (userDb.Item1 == null)
        {
            ErrorMessenger("Login database error 😖", userDb.Item2);
            return;
        }
        else if (userDb.Item1 != null && userDb.Item1.Count() == 0)
        {
            string message = "User " + _user.User + " belum terdaftar di sistem, silahkan ajukan user baru di helpdesk ivanty";
            WarningMessenger("Belum terdaftar 👀", message);
            return;
        }

        var customAuthStateProvider = (CustomAuth)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                userid = userDb.Item1.First().userid,
                username = userDb.Item1.First().username,
                email = userDb.Item1.First().email,
                roles = userDb.Item1.First().roles,
                org_id = userDb.Item1.First().org_id,
                status = userDb.Item1.First().status
            });
        
        var returnUrl = navManager.QueryString("returnUrl") ?? "";
        navManager.NavigateTo(returnUrl, forceLoad:true);
    }
}
