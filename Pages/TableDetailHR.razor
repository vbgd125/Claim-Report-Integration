@page "/DTHR/{id_temp}"
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using TSJ_CRI.Data
@using TSJ_CRI.Model
@using Syncfusion.Blazor.PdfViewer
@using System.IO;
@using System.Web;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Http.Features;
@using System.Net.Http.Headers;
@using System.Threading.Tasks;
@using System.Net.Mail;


@inject UserHRService userHRservice
@inject NavigationManager NavManager
@inject Formservice formservice





<h3>Detail Hilang Rusak</h3>
<br/>

@{
    var SpecificCols = (new string[] { "username" });
    var Tool = (new List<string>() { "Search" });
    var RenderingMode = RowDirection.Horizontal;
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="content-wrapper e-bigger e-adaptive-demo">
                <div class="e-mobile-layout">
                    <div class="e-mobile-content">
                        <SfGrid DataSource="@_userH" Width="1200" AllowSorting="true" AllowPaging="true" AllowTextWrap="true" Toolbar="@Tool" TValue="UserFormHR" EnableAdaptiveUI="true"
                                RowRenderingMode="@RenderingMode" style="position:inherit !important">
                            <GridSearchSettings Fields=@SpecificCols IgnoreCase="true"></GridSearchSettings>
                            <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" ></GridEditSettings>
                            <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler"  TValue="UserFormHR"></GridEvents>
                            <GridPageSettings PageSize="10"></GridPageSettings>
                            <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
                            <GridColumns>
                                <GridColumn Field="@nameof(UserFormHR.Kode)" HeaderText="Kode Produk"></GridColumn>
                                <GridColumn Field="@nameof(UserFormHR.Namaproduk)" HeaderText="Nama Produk"></GridColumn>
                                <GridColumn Field="@nameof(UserFormHR.Batch)" HeaderText="Batch Produk"></GridColumn>
                                <GridColumn Field="@nameof(UserFormHR.Expiredate)" HeaderText="Expire Date"></GridColumn>
                                <GridColumn Field="@nameof(UserFormHR.Jumlah)" HeaderText="Jumlah Produk"></GridColumn> 
                                <GridColumn Field="@nameof(UserFormHR.Ket)" HeaderText="Keterangan"></GridColumn> 
                                
                            </GridColumns>
                        </SfGrid>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
 
 <AuthorizeView Roles="1,2">
      <Authorized>
<div class="control-section">
    
    <div class="button-section">
        <div id="button-control">
            
            <div class="row">
               
                    <p class="c">Klik disini untuk download </p>
                    <p class="d">Klik disini untuk Upload </p>
                <p class="b">Note : Upload hanya bisa sekali berbentuk zip(max 10 MB)</p>
                <p class="a">Note : Download hanya bisa sekali </p>
                        <SfButton Disabled = "@hide" CssClass ="e-custom1" IconCss="e-icons e-download" @onclick="GeneratePDF">Download PDF</SfButton>



                        <SfUploader MaxFileSize="10485760" AllowMultiple="false" AutoUpload="false" AllowedExtensions=".zip" CssClass="btn-upload">
                    <UploaderEvents BeforeRemove="BeforeRemove"></UploaderEvents>
                    <UploaderEvents ValueChange="OnChange"
                       OnRemove="OnRemove"></UploaderEvents>
                    
                </SfUploader>
                
                   
                </div>
                    
                </div>
                

        </div>
    </div>
        </Authorized>
</AuthorizeView>


<div class="row offset-32">
    <AuthorizeView Roles="1,3,4,5">
      <Authorized>
<SfButton CssClass="e-custom2" @onclick="download1">Download Uploaded PDF</SfButton>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="1">
      <Authorized>
        <SfButton CssClass="e-custom-5" @onclick="approval">Approval Admin</SfButton>
        </Authorized>
</AuthorizeView>


<AuthorizeView Roles="4">
      <Authorized>
        <SfButton CssClass="e-custom-3" @onclick="approvallogistik">Approval Logistik</SfButton>
        </Authorized>
</AuthorizeView>


<AuthorizeView Roles="5">
      <Authorized>
        <SfButton CssClass="e-custom-4" @onclick="approvalFA">Approval FA</SfButton>
        </Authorized>
</AuthorizeView>
</div>
<br/>


<style>
    .control-wrapper {
        max-width: 350px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .e-upload.e-control-wrapper, .e-bigger.e-small .e-upload.e-control-wrapper {
        height: 57px;
        width: 300px;
    }
    .e-upload .e-file-select-wrap .e-btn, .e-upload .e-upload-actions .e-btn, .e-bigger.e-small .e-upload .e-file-select-wrap .e-btn, .e-bigger.e-small .e-upload .e-upload-actions .e-btn {

            background-color: #008CBA;
            color: #fff;
            border-color: #008CBA;
}
.e-custom1, .e-custom1:hover, .e-custom1:focus, .e-custom1:active {
        background-color: #008CBA;
        color: #fff;
        border-color: #008CBA;
    }
    .e-custom2, .e-custom2:hover, .e-custom2:focus, .e-custom2:active {
        background-color: #008CBA;
        color: #fff;
        border-color: #008CBA;
    }
    .e-custom3, .e-custom3:hover, .e-custom3:focus, .e-custom3:active {
        background-color: #008CBA;
        color: #fff;
        border-color: #008CBA;
    }
    .e-custom4, .e-custom4:hover, .e-custom4:focus, .e-custom4:active {
        background-color: #008CBA;
        color: #fff;
        border-color: #008CBA;
    }

    .e-custom5, .e-custom5:hover, .e-custom5:focus, .e-custom5:active {
            background-color: #008CBA;
            color: #fff;
            border-color: #008CBA;
        }
    .property-panel-content {
        padding: 0px 0px 20px 0px;
    }

        .property-panel-content:last-child {
            padding: 0px 0px 40px 0px;
        }

    .radio-control {
        margin: 0 0 5% 0;
    }

    .control-section .row {
        margin: 10px 0;
    }

    p.a {
        font-size: 14px;
        font-style: italic;
        display: @display1;
        margin-bottom: 0px;
    }

    p.b {
        font-size: 14px;
        font-style: italic;
        display: @display;
        margin-bottom: 0px;
    }

    p.c {
        font-size: 18px;
        font-style: normal;
        display: @display1;
        margin-bottom: 10px;
    }

    p.d {
        font-size: 18px;
        font-style: normal;
        display: @display;
        margin-bottom: 10px;
    }

    .btn-upload {
        display: @display;
        margin-left: 10px;
    }


    .e-custom1 {
        display: @display1;
        margin-left: 10px;
        height: 35px;
        width: 140px;
    }

    .e-custom2 {
        display: @display2;
        margin-left: 10px;
        height: 35px;
        width: 200px;
    }

    .e-custom-3 {
        display: @display3;
        margin-left: 10px;
        height: 35px;
        width: 200px;
    }
    .e-custom-4 {
        display: @display4;
        margin-left: 10px;
        height: 35px;
        width: 200px;
    }

    .e-custom-5 {
        display: @display5;
        margin-left: 10px;
        height: 35px;
        width: 200px;
        background-color: #008CBA;
        color: #fff;
        border-color: #008CBA;
    }

    .row2 {
        --bs-gutter-x: 0rem;
        --bs-gutter-y: 0;
        display: @hide;
        flex-wrap: wrap;
        margin-top: calc(-1 * var(--bs-gutter-y));
        margin-right: calc(-0.5 * var(--bs-gutter-x));
        margin-left: calc(-0.5 * var(--bs-gutter-x));
        width: 200px
    }
</style>


@*<HxSubmit Color="ThemeColor.Primary" OnClick="">Print</HxSubmit>*@

@*<HxSubmit Color="ThemeColor.Primary" OnClick="">Upload</HxSubmit>*@

@code {
    private List<UserFormHR> _userH;
    UserFormHRbaru HR = new UserFormHRbaru();
    public string ErrorDetails = "";
    private bool IsVisible { get; set; } = true;
    private string UserId = "";
    private string sekarang;
    private int now;
    private List<UserForm> _userf;
    private string Branch = null;
    private string cabang;
    public bool OkayDisabled  = false;
    public bool hide { get; set; } = false;
    private string display = "none";
    private string display1 = "block";
    private string filename = "";
    private string update = "";
    private string FILENAME;
    private string display2 = "none";

    private string kirim;
    private string Message;
    public int HNA;
    List<Produk> _produk;
    private string display3 = "none";
    private string display4 = "none";
    private string display5 = "none";
    public string emailuser;
    public string emailpusat;
    public string emailFA;
    public string emailLogistik;
    public string emailekspedisi;
    public string ekspedisi;
    //To hide/show the button 

    //private List<SfPdfViewer> Viewer;
    //public void onsuccess(SelectedEventArgs action
    //{
    //    string filePath = action.FilesData[0].RawFile.ToString();
    //    Viewer.Load(filePath, null);
    //}



    [Parameter]
    public string id_temp { get; set; } = "";
    public int No_id { get; set; } = 0;
    public string download { get; set; } = "";
    public string updatehr { get; set; }
    private string roles { get; set; }
    public string DocumentPath { get; set; }
    public string no_pengajuan{ get; set; }
    public string Acronim { get; set; }
    public string approve { get; set; }
    public string FA{ get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject] protected IHxMessengerService Messenger { get; set; }
    private async void ErrorMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddError(title: _title, message: _message);
        await Task.Delay(1000);
    }
    private async void SuccessMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddInformation(title: _title, message: _message);
        await Task.Delay(1000);
    }


    protected override async Task OnInitializedAsync()
    {
        var auth = await authenticationState;
        if (auth.User.Identity.IsAuthenticated)
        {
            UserId = auth.User.FindFirst("userid").Value.ToString();
            cabang = auth.User.FindFirst("org_id").Value;
            sekarang = id_temp;
            now = @No_id;

        }
        FA = await formservice.GetFA(id_temp);
        approve = await formservice.Getapprove(id_temp);
        Branch = await formservice.cabang(cabang);
        download = await formservice.getdownload(id_temp);
        //viewer = await formservice.getfile(id_temp);
        updatehr = await formservice.getupdate(id_temp);
        roles = await formservice.getroles(UserId);
        emailuser = await formservice.getemail(UserId);
        FILENAME = await formservice.getfile(id_temp);
        no_pengajuan = await formservice.getpengajuan(id_temp);
        Acronim = await formservice.acronim(cabang);
        HNA = await formservice.gethna(id_temp);
        var emailFAlist = await formservice.getemailFA();
        var emailLogistiklist = await formservice.getemailLogistik();
        var emailpusatlist = await formservice.getemailpusat();
        ekspedisi = await formservice.getekspedisi(id_temp);
        emailekspedisi = await formservice.getemailekspedisi(ekspedisi);

        emailFA = String.Join(", ", emailFAlist.Select(x=>x.email).ToArray());
        emailLogistik = String.Join(", ", emailLogistiklist.Select(x => x.email).ToArray());
        emailpusat = String.Join(", ", emailpusatlist.Select(x => x.email).ToArray());

    }

    private MessageBoxButtons showResult;
    private bool confirmResult;
    [Inject] protected IHxMessageBoxService MessageBox { get; set; }
    private async Task OpenMessageBox()
    {

        showResult = await MessageBox.ShowAsync("Update","Sudah di Approve", MessageBoxButtons.Ok);
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CloseDialog();
            _userf = formservice.GetUser3(sekarang);
            _userH = userHRservice.GetUser2(sekarang);
            formservice.GetUser2(UserId,roles);

            disp();
            up();
            Approve();
            ApproveFA();
            Admin();
            StateHasChanged();
        }
    }
    private void disp()
    {

        if (@download == "1")
        {
            display = "block";
            hide = !hide;
            display1 = "none";
        }
        else
        {
            display = "none";
        }
    }

    private void up()
    {
        if(@updatehr =="Sudah")
        {
            display = "none";
            display2 = "block";
            display3 = "block";
            display5 = "block";
        }
        else{

            display2 = "none";
        }
    }
    private void Approve()
    {

        if (@approve == "Approved by Logistik")
        {
            display3 = "none";
            display4 = "block";

        }


    }
    private void ApproveFA()
    {

        if (@FA == "Approved by FA")
        {
            display4 = "none";

        }


    }
    private void Admin(){
        if (@FA == "Approved by FA" & @approve == "Approved by Logistik")
        {
            display5 = "none";
        }
    }

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }

    private async Task getrefdata()
    {

        userHRservice.GetUser2(sekarang);
        userHRservice.GetUser(UserId);

    }

    public async Task ActionBeginHandler(ActionEventArgs<UserFormHR> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var result = await userHRservice.UpdateUser(Args.Data);
            if (result.Item1 == 0)
            {
                var mess = result.Item2;
            }

            //Args.Action selalu edit ga perlu if else
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var result = await userHRservice.DeleteUser(Args.Data);
            if (result.Item1 == 0)
            {
                var mess = result.Item2;
            }
        }
    }

    public void ActionCompleteHandler(ActionEventArgs<UserFormHR> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            _userH = userHRservice.GetUser2(sekarang);
        }
        else if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            _userH = userHRservice.GetUser2(sekarang);
        }

    }
    private void BeforeRemove(BeforeRemoveEventArgs args)
    {
        args.PostRawFile = false;
    }
    SfPdfViewer Viewer;
    private async void OnChange(UploadChangeEventArgs args)
    {

        foreach (var file in args.Files)
        {
            filename = Path.Combine(args.Files[0].FileInfo.Name);
            var result = await userHRservice.InsertUpdate(id_temp, filename, update);
            var path = Path.Combine("D:", "test upload", filename);

            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();

            if (@updatehr == "Sudah")
            {
                display = "none";
                display2 = "block";
            }
            else
            {

                display2 = "none";
            }
            sentemail();
            NavManager.NavigateTo("History");
            StateHasChanged();

        }


    }

    private void OnRemove(RemovingEventArgs args)
    {
        foreach (var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine("D:", "test upload" ,filename)))
            {
                File.Delete(Path.Combine("D:", "test upload", filename));
            }
        }
    }

    private void sentemail()
    {
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("noreply.tsjcri@tsj.co.id");

                mail.Subject = "TSJCRI: ajuan klaim kepada " + _userf.FirstOrDefault().namaekspedisi + " mengenai " + _userf.FirstOrDefault().hilangrusak;
                mail.Body = "Kepada: " + System.Environment.NewLine + "Yth. Bapak/Ibu " + System.Environment.NewLine + _userf.FirstOrDefault().namaekspedisi + System.Environment.NewLine + System.Environment.NewLine + "Dengan hormat," + System.Environment.NewLine + System.Environment.NewLine +
                 "Kami Informasikan telah terjadi " + _userf.FirstOrDefault().hilangrusak + " barang kiriman dengan no " + _userf.FirstOrDefault().nopengiriman + " sesuai Berita Acara terlampir. "
                + System.Environment.NewLine + "Demikian kami sampaikan terima kasih atas perhatian dan kerjasamanya "
                + System.Environment.NewLine + "Hormat Kami," + System.Environment.NewLine + "PT Tri Sapta Jaya ";
                if (emailekspedisi != ",,")
                {
                    char[] spearator = { ',' };

                    // using the method

                    String[] strlist = emailekspedisi.Split(spearator,
                       StringSplitOptions.RemoveEmptyEntries);

                    foreach (String s in strlist)
                    {
                        mail.To.Add(s);
                    }
                    if (emailuser != ",,")
                    {
                        char[] spearator1 = { ',' };

                        // using the method
                        strlist = emailuser.Split(spearator,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.CC.Add(s);
                        }
                    }
                    if (emailpusat != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                        strlist = emailpusat.Split(spearator,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.CC.Add(s);
                        }
                    }
                    if (emailLogistik != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                        strlist = emailLogistik.Split(spearator,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.CC.Add(s);
                        }
                    }
                    if (emailFA != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                        strlist = emailFA.Split(spearator,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.CC.Add(s);
                        }
                    }

                }
                else
                {

                    if (emailuser != ",,")
                    {
                        char[] spearator1 = { ',' };

                        // using the method
                        string[] strlist = emailuser.Split(spearator1,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.To.Add(s);
                        }
                    }
                    if (emailpusat != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                        string[] strlist = emailpusat.Split(spearator1,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.To.Add(s);
                        }
                    }
                    if (emailLogistik != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                        string[] strlist = emailLogistik.Split(spearator1,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.To.Add(s);
                        }
                    }
                    if (emailFA != ",,")
                    {

                        char[] spearator1 = { ',' };

                        // using the method
                       string[] strlist = emailFA.Split(spearator1,
                           StringSplitOptions.RemoveEmptyEntries);

                        foreach (String s in strlist)
                        {
                            mail.To.Add(s);
                        }
                    }
                }

            
        
            mail.IsBodyHtml = false;
                string filePath = Path.Combine("D:", "test upload", filename);
                string fileName = FILENAME;
                byte[] bytes = File.ReadAllBytes(filePath);

                var attachment = new System.Net.Mail.Attachment(filePath);
                attachment.TransferEncoding = System.Net.Mime.TransferEncoding.QuotedPrintable;
                mail.Attachments.Add(attachment);
                using(SmtpClient smtp = new SmtpClient("mail.enseval.com",25))
                {
                    smtp.UseDefaultCredentials = false;
                    smtp.EnableSsl = false;

                    smtp.Send(mail);
                    Message = "mail sent";
                }
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
    private void approval()
    {
        formservice.Updateapprove(id_temp);
        formservice.UpdateapproveFA(id_temp);
        OpenMessageBox();
        NavManager.NavigateTo("History");
    }

    private void approvallogistik()
    {
        formservice.Updateapprove(id_temp);
        OpenMessageBox();
        NavManager.NavigateTo("History");
    }

    private void approvalFA()
    {
        
        formservice.UpdateapproveFA(id_temp);
        OpenMessageBox();
        NavManager.NavigateTo("History");
    }
    private async void download1()
    {
        
        string[] path = { @"D:\test upload\"+ FILENAME };
        var filePath = Path.Combine(path); 
        FileStream fileStream = new FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
        MemoryStream stream = new MemoryStream();
        fileStream.CopyTo(stream);
        byte[] byteArray = stream.ToArray();
        string base64String = Convert.ToBase64String(byteArray);
        DocumentPath = "data:application/pdf;base64," + base64String;

        await JS.InvokeAsync<object>("saveAsFile", FILENAME,base64String);
    }
    private async void viewer()
    {

        string[] path = { @"D:\test upload\" + FILENAME };
        var filePath = Path.Combine(path);
        FileStream fileStream = new FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
        MemoryStream stream = new MemoryStream();
        fileStream.CopyTo(stream);
        byte[] byteArray = stream.ToArray();
        string base64String = Convert.ToBase64String(byteArray);
        DocumentPath = "data:application/pdf;base64," + base64String;
    }
    public async void GeneratePDF(MouseEventArgs args)
    {


        PrintHRService service = new PrintHRService();
        MemoryStream documentStream = service.CreatePdfDocument(_userf, Branch, _userH,Acronim);
        await JS.SaveAs(_userf.FirstOrDefault().no_pengajuan +" Berita Acara Kehilangan Kerusakan Produk.pdf", documentStream.ToArray());
        download = await formservice.updownload(id_temp);
        if (@download == "1")
        {
            display = "block";
            hide = !hide;
            display1 = "none";
        }
        else
        {
            display = "none";
        }
        HNAHRservice service1 = new HNAHRservice();
        MemoryStream documentStream1 = service1.CreateHNAHR(_produk, _userH, Branch, Acronim, _userf, no_pengajuan);
        await JS.SaveAs(_userf.FirstOrDefault().no_pengajuan+ " HNA.pdf", documentStream1.ToArray());
        StateHasChanged();
    }

    
}

