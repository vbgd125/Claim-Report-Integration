@page "/TS"
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using TSJ_CRI.Data
@using TSJ_CRI.Model

@inject UserKetidaksesuaianService userKetidaksesuaianService
@inject Form2service form2service
@inject NavigationManager NavManager

@inherits HxDialogBase<int>

<div class="pb-3">
    <br />
    <h1>Form Berita Acara Ketidaksesuaian Pengiriman</h1>
    <br />
    <br />
    <div/>
    <EditForm Model="@Form2">
        <DataAnnotationsValidator />

         <div class="row">
            <div class="col-3 offset-41">
                <div class="form-group ">

                    <h5>Cabang</h5>
                    <div class=" input-group p-0 shadow-sm">
                        <input type="value" placeholder="Cabang" class="form-control py-2 px-2 text-center " @bind-value="@Branch" readonly>
                    </div>
                </div>
            </div>
           
        </div>
            


        <div class="row">
            <div class="col-3 offset-3 ">
                <div class="form-group mb-2">
                    <label>Tanggal Pengiriman</label>
                    <div class="datepicker date input-group p-0 shadow-sm">
                        <input type="date" placeholder="Tanggal Rusak" class="form-control py-3 px-2" @bind-value="@Form2.Tanggal">
                    </div>
                </div>
            </div>


            <div class="col-3">
        <div class="form-group col-mb-2">
        <label>Ekspedisi</label>
        <SfDropDownList ID="listekspedisi" TItem="Ekspedisi" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" IgnoreCase="true" TValue="string" AllowFiltering="true" Placeholder="Pilih Salah Satu" DataSource="@_Ekspedisi" CssClass="form-control py-2 px-2" @bind-Value="@Form2.PT" PopupHeight="350px" PopupWidth="350px" >
                <DropDownListFieldSettings Value="NAMA_EKSPEDISI" Text="NAMA_EKSPEDISI"></DropDownListFieldSettings>

            </SfDropDownList>
        </div>
            </div>
            </div>

        <div class="col-3 offset-5">
        <label for="ketidaksesuaian" class="form-label text-center">KETIDAKSESUAIAN</label>
    </div>
        <div class="mb-1 offset-3 ">
            <div class="form-group col-mb-2">
            <InputRadioGroup @bind-Value="@Form2.Ketidaksesuaian">
            @foreach (var item in _ketidaksesuaian)
            {
                <div class="form-check form-check-inline ">
                            <InputRadio class="form-check-input " Value="item.listketidaksesuaian" required/>
                    <label class="form-check-label">@item.Description</label>
                </div>
            }
            </InputRadioGroup>
           
            </div>
        </div>

        @*<div class="form-group col-md-4">
            <label>Terdapat Ketidaksesuaian </label>
            <SfDropDownList ID="listketidaksesuaian" TItem="ketidaksesuaian" TValue="string" Placeholder="Pilih Salah Satu" CssClass="form-control py-1 px-2" DataSource="@_ketidaksesuaian"
                            @bind-Value="@Form2.Ketidaksesuaian">
                <DropDownListFieldSettings Value="listketidaksesuaian" Text="Description"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>*@
        
        <div class="col-sm-9 offset-2">
            <div class="form-group mb-2">
                <label>Notes</label>
                <div class=" input-group p-0 shadow-sm">
                    <input type="value" placeholder="Notes" class="form-control py-3 px-2" @bind-value="@Form2.Notes" required>
                </div>
            </div>
        </div>

        <div class="container">
        <div class="col-xs-12 col-md-2 offset-5 ">
            <SfButton IconCss="e-icons e-plus" IsPrimary="true" CssClass="row2" @onclick="@OpenDialog">Detail</SfButton>
        </div>
    </div>


<hr/>
@{
    var SpecificCols = (new string[] { "username" });
    var Tool = (new List<string>() { "Search" });
    var RenderingMode = RowDirection.Horizontal;
}
        <div class="col-lg-12 control-section ">
    <div class="content-wrapper">
        <div class="row">
            <div class="content-wrapper e-bigger e-adaptive-demo">
                <div class="e-mobile-layout">
                    <div class="e-mobile-content">
                                
                        <SfGrid  DataSource="@_userK"  AllowSorting="true" AllowPaging="true" AllowTextWrap="true" TValue="UserKetidaksesuaian" EnableAdaptiveUI="true" AdaptiveUIMode="AdaptiveMode.Mobile"
                                RowRenderingMode="@RenderingMode" style="position:inherit !important">
                            <GridSearchSettings Fields=@SpecificCols IgnoreCase="true"></GridSearchSettings>
                            <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true"></GridEditSettings>
                            <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="UserKetidaksesuaian"></GridEvents>
                            <GridPageSettings PageSize="10"></GridPageSettings>
                            <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
                            <GridColumns>

                                        <GridColumn Field="@nameof(UserKetidaksesuaian.Dokumen)" IsPrimaryKey="true" HeaderText="No.Dokumen"></GridColumn>
                                <GridColumn Field="@nameof(UserKetidaksesuaian.PO)" HeaderText="No. PO TSJ"></GridColumn>
                                <GridColumn Field="@nameof(UserKetidaksesuaian.Nama)" HeaderText="Nama Produk"></GridColumn>
                                <GridColumn Field="@nameof(UserKetidaksesuaian.TSdokumen)" HeaderText="Ketidaksesuaian Dokumen"></GridColumn>
                                <GridColumn Field="@nameof(UserKetidaksesuaian.TSproduk)" HeaderText="Ketidaksesuaian Produk"></GridColumn>
                                <GridColumn HeaderText="Edit">
                                    <GridCommandColumns>
                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                                        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                                        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat delete" })"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                                
                    </div>
                </div>
            </div>
        </div>
    </div>
        </div>

        <HxSubmit CssClass="row3 offset-32" Color="ThemeColor.Primary" OnValidClick="@(async () => {await InsertRow2() ;await RowInsert(Form2) ;   })">Submit</HxSubmit>

        
</EditForm>
</div>




<SfDialog Target="#target" Width="350px" AllowDragging="false" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Header> Detail </Header>

        <Content>

            <EditForm Model="@modeldata">
                <DataAnnotationsValidator />
                <div class="form-column">
                    <div class="form-group col-md-12">
                        <label>No.Dokumen</label>
                        <SfTextBox @bind-Value="@modeldata.Dokumen"></SfTextBox>
                        <ValidationMessage For="@(() => modeldata.Dokumen)" />
                    </div>
                    <div class="form-group col-md-12">
                        <label>No.PO TSJ</label>
                        <SfTextBox @bind-Value="@modeldata.PO"></SfTextBox>
                        <ValidationMessage For="@(() => modeldata.PO)" />
                    </div>
                     
                    
                    <div class="form-group col-md-12">
                        <label>Kode Produk</label>
                        <SfComboBox ID="kodeprod" TItem="Produk" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" IgnoreCase="true" TValue="string" AllowFiltering="true" Placeholder="Pilih Salah Satu" DataSource="@_produk" CssClass="form-control py-2 px-2" 
                        @bind-Value="@modeldata.kode" PopupHeight="350px" PopupWidth="350px">
                            <ComboBoxEvents TItem="Produk" TValue="string" ValueChange="@ValueChangeHandler"></ComboBoxEvents>
                            <ComboBoxFieldSettings Value="kodeprod" Text="pengenal"></ComboBoxFieldSettings>
                        </SfComboBox>
                        
                    </div>
                    <div class="form-group col-md-12">
                        <label>Nama Produk</label>
                        <SfTextBox @bind-Value="@modeldata.Nama" Readonly></SfTextBox>
                        
                    </div>
                    <div class="form-group col-md-12">
                        <label>Kuantitas Dokumen</label>
                        <SfNumericTextBox @bind-Value="@modeldata.TSdokumen" Min="0"></SfNumericTextBox>
                        <ValidationMessage For="@(() => modeldata.TSdokumen)" />
                    </div>
                    <div class="form-group col-md-12">
                        <label>Kuantitas Produk</label>
                        <SfNumericTextBox @bind-Value="@modeldata.TSproduk" Min="0"></SfNumericTextBox>
                        <ValidationMessage For="@(() => modeldata.TSproduk)" />
                    </div>
                </div>
            
                <HxSubmit CssClass="row1 offset-9" Color="ThemeColor.Primary" OnValidClick="@(async () => await InsertRow(modeldata))">Submit</HxSubmit>
            </EditForm>
        </Content>
    </DialogTemplates>
        <DialogAnimationSettings Effect="@AnimationEffect" Duration=600 />
    
</SfDialog>








<style>
    .e-plus-icon::before {
        content: '\e823';

    }

/*    .e-custom {
        font-size: 17px;
    line-height: 1.34em; 
    padding: 4px 6px;
    border-radius: 2px;
    width: 200px;
    height: 30px;
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: #fff;
}*/

    p.a {
        font-size: 10px;
        font-style: italic;
    }

    .row3 {
        --bs-gutter-x: 0rem;
        --bs-gutter-y: 0;
        display: flex;
        flex-wrap: wrap;
        margin-top: calc(-1 * var(--bs-gutter-y));
        margin-right: calc(-0.5 * var(--bs-gutter-x));
        margin-left: calc(-0.5 * var(--bs-gutter-x));
        width: 400px;
        display: @display1;
        margin-left: 34%;
    }
    

/*    .e-control.e-btn.e-lib.e-flat.delete.e-edit-delete.e-Deletebutton {
        display: @display2;

    }*/
</style>

@code {
    private string cabang;
    public DateTime Tanggal { get; set; } = DateTime.Today;
    public string No { get; set; }
    public string PT { get; set; }
    public string Notes { get; set; }
    private string UserId = "";
    private List<UserKetidaksesuaian> _userK;
    UserBaru modeldata = new UserBaru();
    public string ErrorDetails = "";
    private bool IsVisible { get; set; } = true;
    private DialogEffect AnimationEffect = DialogEffect.Zoom;
    UserFormbaru2 Form2 = new UserFormbaru2();
    private int sequence ;
    private string seq;
    private string Branch = null;
    public int org_id;
    private string display1 = "none";
    private string display2 = "none";
    private bool flag = false;

    public bool hide { get; set; } = false;
    private int hitung;
    List<Produk> _produk;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private void test()
    {

    }

    [Inject] protected IHxMessageBoxService MessageBox { get; set; }

    private MessageBoxButtons showResult;
 

    private async Task OpenMessageBox()
    {

        var data = form2service.GetNo(seq);
        showResult = await MessageBox.ShowAsync("Submit Berhasil", "No Pengajuan anda: " + data.FirstOrDefault().no_pengajuan, MessageBoxButtons.Ok);
    }

    private async Task OpenMessageBox1()
    {


        showResult = await MessageBox.ShowAsync("Error", "Jumlah Kuantitas pada dokumen dan produk tidak dapat sama", MessageBoxButtons.Ok);
    }

    private async Task ErrorMessageBox()
    {


        showResult = await MessageBox.ShowAsync("Error", "Masih Ada yang Belum Diisi. Ayo Dicek Lagi", MessageBoxButtons.Ok);
    }



    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            cabang = authState.User.FindFirst("org_id").Value;
            UserId = authState.User.FindFirst("userid").Value.ToString();
        }
        seq =  await form2service.count();
        sequence = await form2service.updatecount();
        await userKetidaksesuaianService.deletetemp(UserId);
        Branch = await form2service.cabang(cabang);
        hitung = await userKetidaksesuaianService.hitung();
        submit();
        count();
        //var check = await form2service.checktemp(UserId);
        //if (check == "0")
        //{
        //    NavManager.NavigateTo("DK");
        //}
    }

    protected FormHilang model = new FormHilang();
    public class FormHilang
    {

    }

    List<ketidaksesuaian> _ketidaksesuaian = new List<ketidaksesuaian>
    {
        new ketidaksesuaian() { listketidaksesuaian = "Jumlah Lebih", Description = "Jumlah Lebih" },
        new ketidaksesuaian() { listketidaksesuaian = "Tidak Sesuai Pesanan", Description = "Tidak Sesuai Pesanan" },
        new ketidaksesuaian() { listketidaksesuaian = "Selisih Batch Number", Description = "Selisih Batch Number" },
        new ketidaksesuaian() { listketidaksesuaian = "ED Dekat", Description = "ED Dekat" }
    };

    List<Ekspedisi> _Ekspedisi;


    // belum bisa validasi error message
    //protected UserDetail model = new UserDetail();
    //public class UserDetail
    //{
    //    [Required(ErrorMessage = "No.Dokumen tidak boleh kosong")]
    //    [MaxLength(50, ErrorMessage = "Panjang maksimal username 50 karakter.")]
    //    public string Dokumen { get; set; }
    //    [Required(ErrorMessage = "No.PO tidak boleh kosong")]
    //    [MaxLength(100, ErrorMessage = "Panjang maksimal password 100 karakter.")]
    //    public string PO { get; set; }
    //}


    [Inject] protected IHxMessengerService Messenger { get; set; }
    private async void ErrorMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddError(title: _title, message: _message);
        await Task.Delay(1000);
    }
    private async void SuccessMessenger(string _title, string _message)
    {
        Messenger.Clear();
        Messenger.AddInformation(title: _title, message: _message);
        await Task.Delay(1000);
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CloseDialog();
            _userK = userKetidaksesuaianService.GetUser(UserId);
            _Ekspedisi = userKetidaksesuaianService.GetEkspedisi();
            _produk = userKetidaksesuaianService.Getkodeproduk();
            StateHasChanged();
        }
    }

    private void count()
    {
        if (@hitung == 10)
        {
            hide = !hide;
        }
        else
        {
            hide = hide;

        }
    }
    private void submit()
    {
        if (@hitung > 0)
        {
            display1 = "block";
        }
        else
        {
            display1 = "none";

        }
    }
    private void delete()
    {
        if (@hitung > 1)
        {
            display2 = "block";
        }
        else
        {
            display2 = "none";

        }
    }
    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }

    private async Task getrefdata()
    {


    }

    // untuk dropdown list di detail
    private void ValueChangeHandler(ChangeEventArgs<string, Produk> args)
    {
        if (args.ItemData == null)
        {
            modeldata.Nama = null;
        }
        else
        {
            modeldata.Nama = args.ItemData.namaprod;
        }
    }

    // untuk tombol edit
    public async Task ActionBeginHandler(ActionEventArgs<UserKetidaksesuaian> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var result = await userKetidaksesuaianService.UpdateUser(Args.Data);
            if (result.Item1 == 0)
            {
                var mess = result.Item2;
            }

            //Args.Action selalu edit ga perlu if else
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var result = await userKetidaksesuaianService.DeleteUser(Args.Data);
            if (result.Item1 == 0)
            {
                var mess = result.Item2;
            }
        }
    }
    //   masukin ke table detailtemp
    private async Task InsertRow(UserBaru userBaru)
    {
        if (modeldata.TSdokumen == modeldata.TSproduk)
        {
            await OpenMessageBox1();

        }else{
            var result = await userKetidaksesuaianService.InsertUser(userBaru, UserId,seq);
            if (result.Item1 == 0)
            {
                var mess = result.Item2;
                CloseDialog();
                ErrorMessenger("Belum berhasil insert 👀", mess);
                await getrefdata();
                StateHasChanged();
            }
            else
            {

                var mess = result.Item2;
                CloseDialog();
                SuccessMessenger("Berhasil insert", mess);
                await getrefdata();
                _userK = userKetidaksesuaianService.GetUser(UserId);
                modeldata.Dokumen = null;
                modeldata.PO = null;
                modeldata.Nama = null;
                modeldata.kode = null;
                modeldata.TSdokumen = 0;
                modeldata.TSproduk = 0;
                hitung = await userKetidaksesuaianService.hitung();
                //count();
                submit();

                StateHasChanged();
            }
        }
    }


    public void ActionCompleteHandler(ActionEventArgs<UserKetidaksesuaian> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            _userK = userKetidaksesuaianService.GetUser(UserId);
        }
        else if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            _userK = userKetidaksesuaianService.GetUser(UserId);
        }
    }

    //    private async Task InsertRow1()
    //{
    //    var result = await form2service.InsertForm2(UserId);
    //    if (result.Item1 == 0)
    //    {
    //        var mess = result.Item2;
    //        CloseDialog();
    //        ErrorMessenger("Belum berhasil insert 👀", mess);
    //        await getrefdata();
    //        StateHasChanged();
    //    }
    //    else
    //    {
    //        var mess = result.Item2;
    //        CloseDialog();
    //        SuccessMessenger("Berhasil insert", mess);
    //        await getrefdata();
    //        StateHasChanged();

    //    }
    //}


    //  masukin ke table header
    private async Task InsertRow2()
    {
        var result = await userKetidaksesuaianService.InsertUser2(UserId);
        if (result.Item1 == 0)
        {
            var mess = result.Item2;
            CloseDialog();
            ErrorMessenger("Belum berhasil insert 👀", mess);
            await getrefdata();
            StateHasChanged();
            await ErrorMessageBox();
            flag = false;
        }
        else
        {
            var mess = result.Item2;
            CloseDialog();
            SuccessMessenger("Berhasil insert", mess);
            await getrefdata();
            StateHasChanged();
            flag = true;
            
        }
    }

    // masukin ke table detaildetail
    private async Task RowInsert(UserFormbaru2 userFormbaru2)
    {
        if (flag == true)
        {
            var result = await form2service.InsertUser(userFormbaru2, UserId, seq, cabang);


            if (result.Item1 == 0)
            {
                var mess = result.Item2;
                CloseDialog();
                ErrorMessenger("Belum berhasil insert 👀", mess);
                await getrefdata();
                StateHasChanged();
            }
            else
            {
                var mess = result.Item2;
                CloseDialog();
                SuccessMessenger("Berhasil insert", mess);
                await getrefdata();
                await OpenMessageBox();
                StateHasChanged();
                NavManager.NavigateTo("History");

            }
        }
    }

}